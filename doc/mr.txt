*mr.txt*		Asynchronous Most Recently Used/Written record plugin

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT license

=============================================================================
CONTENTS						*mr-contents*

INTRODUCTION				|mr-introduction|
USAGE					|mr-usage|
  CTRLP USAGE				|mr-usage-ctrlp|
  ASYNCOMPLETE USAGE			|mr-usage-asyncomplete|
INTERFACE				|mr-interface|
  VARIABLE				|mr-variable|
  FUNCTION				|mr-function|


=============================================================================
INTRODUCTION						*mr-introduction*

*mr.vim* (mr) is a plugin to asynchronously record

- MRU (Most Recently Used files)
- MRW (Most Recently Written files)
- MRR (Most Recent git Repositories)

The original idea of MRW comes from https://github.com/rbtnn/vim-mrw.


=============================================================================
USAGE							*mr-usage*

Get |List| of MRU/MRW/MRR by calling |mr#mru#list()|, |mr#mrw#list()|, or
|mr#mrr#list()| like:
>
	:echo mr#mru#list()
	:echo mr#mrw#list()
	:echo mr#mrr#list()
<

How to use under fuzzy finder or auto completion plugin.

CTRLP USAGE						*mr-usage-ctrlp*

ctrlp.vim (https://github.com/ctrlpvim/ctrlp.vim) is Pure Vim script fuzzy
finder plugin. To use mr.vim with ctrlp.vim, use ctrlp-mr.vim
(https://github.com/tsuyoshicho/ctrlp-mr.vim) plugin and configure below:
>
	let g:ctrlp_extensions = get(g:, 'ctrlp_extensions', [])
	        \ + ['mr/mru', 'mr/mrw', 'mr/mrr']
<

-----------------------------------------------------------------------------
ASYNCOMPLETE USAGE					*mr-usage-asyncomplete*

asyncomplete.vim (https://github.com/prabirshrestha/asyncomplete.vim) is Pure
Vim script async auto completion plugin. To use mr.vim with asyncomplete.vim,
use asyncomplete-mr.vim (https://github.com/tsuyoshicho/asyncomplete-mr.vim)
plugin and configure below:
>
	" Setting to use MRU, same for MRW and MRR.
	autocmd User asyncomplete_setup call asyncomplete#register_source(
	    \ asyncomplete#sources#mru#get_source_options({
	    \   'name': 'mru',
	    \   'allowlist': ['*'],
	    \   'completor': function('asyncomplete#sources#mru#completor'),
	    \ })
	    \)
<

Alternatively, use asyncomplete-anylist
(https://github.com/tsuyoshicho/asyncomplete-anylist) plugin and configure
below:
>
	" Setting to use MRU, same for MRW and MRR.
	autocmd User asyncomplete_setup call asyncomplete#register_source(
	    \ asyncomplete#sources#anylist#get_source_options({
	    \   'name': 'anylist',
	    \   'allowlist': ['*'],
	    \   'completor': function('asyncomplete#sources#anylist#completor'),
	    \   'config': {
	    \     'matcher': '\(\w\|\f\)+$',
	    \     'items': [
	    \       {'name': 'mru',
	    \        'function': function('mr#mru#list'), 'args': []},
	    \     ],
	    \   },
	    \ })
	    \)
<


=============================================================================
INTERFACE						*mr-interface*

-----------------------------------------------------------------------------
VARIABLE						*mr-variable*

*g:mr_mru_disabled*
	Disable recording MRU.
	Default: 0

*g:mr_mrw_disabled*
	Disable recording MRW.
	Default: 0

*g:mr_mrr_disabled*
	Disable recording MRR.
	Default: 0

*g:mr#delay*
	Delay time before record files in milliseconds.
	Default: 200

*g:mr#threshold*
	The maximum number of entries of MRU/MRW to records.
	Default: 1000

*g:mr#mru#filename*
	A filename to record MRU.
	Default: "~/.cache/mr/mru"

*g:mr#mrw#filename*
	A filename to record MRW.
	Default: "~/.cache/mr/mrw"

*g:mr#mrr#filename*
	A filename to record MRR.
	Default: "~/.cache/mr/mrr"

*g:mr#mru#predicates*
*g:mr#mrw#predicates*
*g:mr#mrr#predicates*
	A |List| of |Funcref| to predicate whether a file should be recorded.
	Only file/directory that pass all predicate functions are recorded.
>
	" Do NOT record 'README.md'
	let g:mr#mru#predicates = [{ filename -> filename !~# 'README.md' }]
<
	Default: []

-----------------------------------------------------------------------------
FUNCTION						*mr-function*

						*mr#filter()*
mr#filter({items}, {path})
	Return filtered {items} by {path}. In other word, it returns children
	of {path} in {items}.
>
	" Filter mru by current working directory
	echo mr#filter(mr#mru#list(), getcwd())
<

						*mr#mru#list()*
						*mr#mrw#list()*
						*mr#mrr#list()*
mr#mru#list()
mr#mrw#list()
mr#mrr#list()
	Return a |List| of |String| which indicates MRU/MRW/MRR.

						*mr#mru#start_recording()*
						*mr#mrw#start_recording()*
						*mr#mrr#start_recording()*
mr#mru#start_recording()
mr#mrw#start_recording()
mr#mrr#start_recording()
	Start MRU/MRW/MRR recording by several |autocmd|.

						*mr#mru#stop_recording()*
						*mr#mrw#stop_recording()*
						*mr#mrr#stop_recording()*
mr#mru#stop_recording()
mr#mrw#stop_recording()
mr#mrr#stop_recording()
	Stop MRU/MRW/MRR recording by several |autocmd|.

						*mr#mru#delete()*
						*mr#mrw#delete()*
						*mr#mrr#delete()*
mr#mru#delete({filename})
mr#mrw#delete({filename})
mr#mrr#delete({filename})
	Delete a {filename} from the MRU/MRW/MRR list.

-----------------------------------------------------------------------------
DENOPS							*mr-denops*

mr provides the following denops APIs.

mrr:list						*mr-denops-mrr-list*
	Return a list of MRR.

mru:list						*mr-denops-mru-list*
	Return a list of MRU.

mrw:list						*mr-denops-mrw-list*
	Return a list of MRW.

>
	// Get MRU list
	const mru = await denops.dispatch("mr", "mru:list");
<

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
